'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeIsStrictlyInRootScope = exports.makeElementSelector = undefined;

var _events = require('./events');

var _isolate = require('./isolate');

function makeIsStrictlyInRootScope(namespace) {
  var classIsForeign = function classIsForeign(c) {
    var matched = c.match(/cycle-scope-(\S+)/);
    return matched && namespace.indexOf('.' + c) === -1;
  };
  var classIsDomestic = function classIsDomestic(c) {
    var matched = c.match(/cycle-scope-(\S+)/);
    return matched && namespace.indexOf('.' + c) !== -1;
  };
  return function isStrictlyInRootScope(leaf) {
    for (var el = leaf; el; el = el.parentElement) {
      var split = String.prototype.split;
      var classList = el.classList || split.call(el.className, ' ');
      if (Array.prototype.some.call(classList, classIsDomestic)) {
        return true;
      }
      if (Array.prototype.some.call(classList, classIsForeign)) {
        return false;
      }
    }
    return true;
  };
}

function makeElementSelector(rootElement$) {
  return function elementSelector(selector) {
    if (typeof selector !== 'string') {
      throw new Error('DOM driver\'s select() expects the argument to be a ' + 'string as a CSS selector');
    }

    var namespace = this.namespace;
    var trimmedSelector = selector.trim();
    var childNamespace = trimmedSelector === ':root' ? namespace : namespace.concat(trimmedSelector);
    var element$ = rootElement$.map(function (rootEl) {
      if (childNamespace.join('') === '') {
        return rootEl;
      }
      var nodeList = rootEl.querySelectorAll(childNamespace.join(' '));
      if (nodeList.length === 0) {
        nodeList = rootEl.querySelectorAll(childNamespace.join(''));
      }
      var array = Array.prototype.slice.call(nodeList);
      return array.filter(makeIsStrictlyInRootScope(childNamespace));
    });
    return {
      observable: element$,
      namespace: childNamespace,
      select: makeElementSelector(rootElement$),
      events: (0, _events.makeEventsSelector)(rootElement$, childNamespace),
      isolateSource: _isolate.isolateSource,
      isolateSink: _isolate.isolateSink
    };
  };
}

exports.makeElementSelector = makeElementSelector;
exports.makeIsStrictlyInRootScope = makeIsStrictlyInRootScope;