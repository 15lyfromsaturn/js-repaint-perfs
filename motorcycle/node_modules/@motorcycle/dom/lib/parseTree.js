'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _most = require('most');

var _most2 = _interopRequireDefault(_most);

var _map = require('fast.js/array/map');

var _map2 = _interopRequireDefault(_map);

var _filter = require('fast.js/array/filter');

var _filter2 = _interopRequireDefault(_filter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

var combineVTreeStreams = function combineVTreeStreams(vTree) {
  for (var _len = arguments.length, children = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    children[_key - 1] = arguments[_key];
  }

  return {
    sel: vTree.sel,
    data: vTree.data,
    text: vTree.text,
    elm: vTree.elm,
    key: vTree.key,
    children: children
  };
};

var parseTree = function parseTree(vTree) {
  if (!vTree) {
    return null;
  } else if (vTree.observe) {
    return vTree.flatMap(parseTree);
  } else if ('object' === (typeof vTree === 'undefined' ? 'undefined' : _typeof(vTree))) {
    var vtree$ = _most2.default.just(vTree);
    if (vTree.children && vTree.children.length > 0) {
      return _most2.default.combine.apply(_most2.default, [combineVTreeStreams, vtree$].concat(_toConsumableArray((0, _filter2.default)((0, _map2.default)(vTree.children, parseTree), function (x) {
        return x !== null;
      }))));
    }
    return vtree$;
  } else {
    throw new Error('Unhandled tree value');
  }
};

exports.default = parseTree;