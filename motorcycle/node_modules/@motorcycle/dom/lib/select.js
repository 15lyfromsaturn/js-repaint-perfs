'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeIsStrictlyInRootScope = undefined;

var _events = require('./events');

var _events2 = _interopRequireDefault(_events);

var _isolate = require('./isolate');

var _array = require('fast.js/array');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function makeIsStrictlyInRootScope(namespace) {
  var classIsForeign = function classIsForeign(c) {
    var matched = c.match(/cycle-scope-(\S+)/);
    return matched && namespace.indexOf('.' + c) === -1;
  };
  var classIsDomestic = function classIsDomestic(c) {
    var matched = c.match(/cycle-scope-(\S+)/);
    return matched && namespace.indexOf('.' + c) !== -1;
  };
  return function isStrictlyInRootScope(leaf) {
    for (var el = leaf; el !== null; el = el.parentElement) {
      var split = String.prototype.split;
      var classList = el.classList || split.call(el.className, ' ');
      if (Array.prototype.some.call(classList, classIsDomestic)) {
        return true;
      }
      if (Array.prototype.some.call(classList, classIsForeign)) {
        return false;
      }
    }
    return true;
  };
}

function makeElementGetter(selector) {
  return function elemenGetter(rootElement) {
    if (selector.join('') === '') {
      return rootElement;
    }
    var nodeList = rootElement.querySelectorAll(selector.join(' ').trim());
    if (nodeList.length === 0) {
      nodeList = rootElement.querySelectorAll(selector.join(''));
    }
    var array = Array.prototype.slice.call(nodeList);
    return (0, _array.filter)(array, makeIsStrictlyInRootScope(selector));
  };
}

function makeElementSelector(rootElement$) {
  return function DOMSelect(selector) {
    if (typeof selector !== 'string') {
      throw new Error('DOM drivers select() expects first argument to be a ' + 'string as a CSS selector');
    }

    var namespace = this.namespace;

    var scopedSelector = (0, _array.concat)(namespace, selector.trim() === ':root' ? '' : selector.trim());

    return {
      observable: rootElement$.map(makeElementGetter(scopedSelector)),
      namespace: scopedSelector,
      select: makeElementSelector(rootElement$),
      events: (0, _events2.default)(rootElement$, scopedSelector),
      isolateSource: _isolate.isolateSource,
      isolateSink: _isolate.isolateSink
    };
  };
}

exports.default = makeElementSelector;
exports.makeIsStrictlyInRootScope = makeIsStrictlyInRootScope;