'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeIsStrictlyInRootScope = exports.makeElementSelector = undefined;

var _makeIsStrictlyInRootScope = require('./makeIsStrictlyInRootScope');

var _events = require('./events');

var _isolate = require('./isolate');

var isValidString = function isValidString(param) {
  return typeof param === 'string' && param.length > 0;
};

var contains = function contains(str, match) {
  return str.indexOf(match) > -1;
};

var isNotTagName = function isNotTagName(param) {
  return isValidString(param) && contains(param, '.') || contains(param, '#') || contains(param, ':');
};

function sortNamespace(a, b) {
  if (isNotTagName(a) && isNotTagName(b)) {
    return 0;
  }
  return isNotTagName(a) ? 1 : -1;
}

function removeDuplicates(arr) {
  var newArray = [];
  arr.forEach(function (element) {
    if (newArray.indexOf(element) === -1) {
      newArray.push(element);
    }
  });
  return newArray;
}

var getScope = function getScope(namespace) {
  return namespace.filter(function (c) {
    return c.indexOf('.cycle-scope') > -1;
  });
};

function makeFindElements(namespace) {
  return function findElements(rootElement) {
    if (namespace.join('') === '') {
      return rootElement;
    }
    var slice = Array.prototype.slice;

    var scope = getScope(namespace);
    // Uses global selector && is isolated
    if (namespace.indexOf('*') > -1 && scope.length > 0) {
      // grab top-level boundary of scope
      var topNode = rootElement.querySelector(scope.join(' '));
      // grab all children
      var childNodes = topNode.getElementsByTagName('*');
      return removeDuplicates([topNode].concat(slice.call(childNodes))).filter((0, _makeIsStrictlyInRootScope.makeIsStrictlyInRootScope)(namespace));
    }

    return removeDuplicates(slice.call(rootElement.querySelectorAll(namespace.join(' '))).concat(slice.call(rootElement.querySelectorAll(namespace.join(''))))).filter((0, _makeIsStrictlyInRootScope.makeIsStrictlyInRootScope)(namespace));
  };
}

function makeElementSelector(rootElement$) {
  return function elementSelector(selector) {
    if (typeof selector !== 'string') {
      throw new Error('DOM driver\'s select() expects the argument to be a ' + 'string as a CSS selector');
    }

    var namespace = this.namespace;
    var trimmedSelector = selector.trim();
    var childNamespace = trimmedSelector === ':root' ? namespace : namespace.concat(trimmedSelector).sort(sortNamespace);

    return {
      observable: rootElement$.map(makeFindElements(childNamespace)),
      namespace: childNamespace,
      select: makeElementSelector(rootElement$),
      events: (0, _events.makeEventsSelector)(rootElement$, childNamespace),
      isolateSource: _isolate.isolateSource,
      isolateSink: _isolate.isolateSink
    };
  };
}

exports.makeElementSelector = makeElementSelector;
exports.makeIsStrictlyInRootScope = _makeIsStrictlyInRootScope.makeIsStrictlyInRootScope;