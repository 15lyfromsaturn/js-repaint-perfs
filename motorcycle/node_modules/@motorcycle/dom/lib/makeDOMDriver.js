'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeDOMDriver = undefined;

var _most = require('most');

var _hold = require('@most/hold');

var _hold2 = _interopRequireDefault(_hold);

var _snabbdom = require('snabbdom');

var _h = require('snabbdom/h');

var _h2 = _interopRequireDefault(_h);

var _classNameFromVNode = require('snabbdom-selector/lib/classNameFromVNode');

var _classNameFromVNode2 = _interopRequireDefault(_classNameFromVNode);

var _selectorParser2 = require('snabbdom-selector/lib/selectorParser');

var _selectorParser3 = _interopRequireDefault(_selectorParser2);

var _utils = require('./utils');

var _modules = require('./modules');

var _modules2 = _interopRequireDefault(_modules);

var _transposition = require('./transposition');

var _isolate = require('./isolate');

var _select = require('./select');

var _events = require('./events');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function makeVNodeWrapper(rootElement) {
  return function vNodeWrapper(vNode) {
    var _selectorParser = (0, _selectorParser3.default)(vNode.sel);

    var selectorTagName = _selectorParser.tagName;
    var selectorId = _selectorParser.id;

    var vNodeClassName = (0, _classNameFromVNode2.default)(vNode);
    var _vNode$data = vNode.data;
    var vNodeData = _vNode$data === undefined ? {} : _vNode$data;
    var _vNodeData$props = vNodeData.props;
    var vNodeDataProps = _vNodeData$props === undefined ? {} : _vNodeData$props;
    var _vNodeDataProps$id = vNodeDataProps.id;
    var vNodeId = _vNodeDataProps$id === undefined ? selectorId : _vNodeDataProps$id;


    var isVNodeAndRootElementIdentical = vNodeId.toUpperCase() === rootElement.id.toUpperCase() && selectorTagName.toUpperCase() === rootElement.tagName.toUpperCase() && vNodeClassName.toUpperCase() === rootElement.className.toUpperCase();

    if (isVNodeAndRootElementIdentical) {
      return vNode;
    }

    var tagName = rootElement.tagName;
    var id = rootElement.id;
    var className = rootElement.className;

    var elementId = id ? '#' + id : '';
    var elementClassName = className ? '.' + className.split(' ').join('.') : '';
    return (0, _h2.default)('' + tagName + elementId + elementClassName, {}, [vNode]);
  };
}

function DOMDriverInputGuard(view$) {
  if (!view$ || typeof view$.observe !== 'function') {
    throw new Error('The DOM driver function expects as input an ' + 'Observable of virtual DOM elements');
  }
}

function defaultOnErrorFn(msg) {
  if (console && console.error) {
    console.error(msg);
  } else {
    console.log(msg);
  }
}

var defaults = {
  modules: _modules2.default,
  onError: defaultOnErrorFn
};

function makeDOMDriver(container) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? defaults : arguments[1];

  var _ref$modules = _ref.modules;
  var modules = _ref$modules === undefined ? _modules2.default : _ref$modules;
  var _ref$onError = _ref.onError;
  var onError = _ref$onError === undefined ? defaultOnErrorFn : _ref$onError;

  var patch = (0, _snabbdom.init)(modules);
  var rootElement = (0, _utils.domSelectorParser)(container);

  if (!Array.isArray(modules)) {
    throw new Error('Optional modules option must be ' + 'an array for snabbdom modules');
  }

  if (typeof onError !== 'function') {
    throw new Error('Optional onError opition must be ' + 'a function to approriately handle your errors');
  }

  function DOMDriver(view$) {
    DOMDriverInputGuard(view$);

    var rootElement$ = (0, _hold2.default)(view$.map(_transposition.transposeVTree).switch().map(makeVNodeWrapper(rootElement)).scan(patch, rootElement).skip(1).recoverWith(function (err) {
      onError(err);
      return (0, _most.throwError)(err);
    }).map(function (_ref2) {
      var elm = _ref2.elm;
      return elm;
    }));

    rootElement$.drain();

    return {
      observable: rootElement$,
      namespace: [],
      select: (0, _select.makeElementSelector)(rootElement$),
      events: (0, _events.makeEventsSelector)(rootElement$),
      isolateSink: _isolate.isolateSink,
      isolateSource: _isolate.isolateSource
    };
  }

  return DOMDriver;
}

exports.makeDOMDriver = makeDOMDriver;