'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.video = exports.ul = exports.u = exports.tr = exports.title = exports.thead = exports.th = exports.tfoot = exports.textarea = exports.td = exports.tbody = exports.table = exports.sup = exports.sub = exports.style = exports.strong = exports.span = exports.source = exports.small = exports.select = exports.section = exports.script = exports.samp = exports.s = exports.ruby = exports.rt = exports.rp = exports.q = exports.pre = exports.param = exports.p = exports.option = exports.optgroup = exports.ol = exports.object = exports.noscript = exports.nav = exports.meta = exports.menu = exports.mark = exports.map = exports.link = exports.li = exports.legend = exports.label = exports.keygen = exports.kbd = exports.ins = exports.input = exports.img = exports.iframe = exports.i = exports.html = exports.hr = exports.hgroup = exports.header = exports.head = exports.h6 = exports.h5 = exports.h4 = exports.h3 = exports.h2 = exports.h1 = exports.form = exports.footer = exports.figure = exports.figcaption = exports.fieldset = exports.embed = exports.em = exports.dt = exports.dl = exports.div = exports.dir = exports.dfn = exports.del = exports.dd = exports.colgroup = exports.col = exports.code = exports.cite = exports.caption = exports.canvas = exports.button = exports.br = exports.body = exports.blockquote = exports.bdo = exports.bdi = exports.base = exports.b = exports.audio = exports.aside = exports.article = exports.area = exports.address = exports.abbr = exports.a = exports.h = exports.makeDOMDriver = undefined;

var _most = require('most');

var _most2 = _interopRequireDefault(_most);

var _snabbdom = require('snabbdom');

var _snabbdom2 = _interopRequireDefault(_snabbdom);

var _h = require('snabbdom/h');

var _h2 = _interopRequireDefault(_h);

var _map = require('fast.js/array/map');

var _map2 = _interopRequireDefault(_map);

var _reduce = require('fast.js/array/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _filter = require('fast.js/array/filter');

var _filter2 = _interopRequireDefault(_filter);

var _utils = require('./utils');

var _fromEvent = require('./fromEvent');

var _fromEvent2 = _interopRequireDefault(_fromEvent);

var _parseTree = require('./parseTree');

var _parseTree2 = _interopRequireDefault(_parseTree);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('hyperscript-helpers')(_h2.default);

var a = _require.a;
var abbr = _require.abbr;
var address = _require.address;
var area = _require.area;
var article = _require.article;
var aside = _require.aside;
var audio = _require.audio;
var b = _require.b;
var base = _require.base;
var bdi = _require.bdi;
var bdo = _require.bdo;
var blockquote = _require.blockquote;
var body = _require.body;
var br = _require.br;
var button = _require.button;
var canvas = _require.canvas;
var caption = _require.caption;
var cite = _require.cite;
var code = _require.code;
var col = _require.col;
var colgroup = _require.colgroup;
var dd = _require.dd;
var del = _require.del;
var dfn = _require.dfn;
var dir = _require.dir;
var div = _require.div;
var dl = _require.dl;
var dt = _require.dt;
var em = _require.em;
var embed = _require.embed;
var fieldset = _require.fieldset;
var figcaption = _require.figcaption;
var figure = _require.figure;
var footer = _require.footer;
var form = _require.form;
var h1 = _require.h1;
var h2 = _require.h2;
var h3 = _require.h3;
var h4 = _require.h4;
var h5 = _require.h5;
var h6 = _require.h6;
var head = _require.head;
var header = _require.header;
var hgroup = _require.hgroup;
var hr = _require.hr;
var html = _require.html;
var i = _require.i;
var iframe = _require.iframe;
var img = _require.img;
var input = _require.input;
var ins = _require.ins;
var kbd = _require.kbd;
var keygen = _require.keygen;
var label = _require.label;
var legend = _require.legend;
var li = _require.li;
var link = _require.link;
var map = _require.map;
var mark = _require.mark;
var menu = _require.menu;
var meta = _require.meta;
var nav = _require.nav;
var noscript = _require.noscript;
var object = _require.object;
var ol = _require.ol;
var optgroup = _require.optgroup;
var option = _require.option;
var p = _require.p;
var param = _require.param;
var pre = _require.pre;
var q = _require.q;
var rp = _require.rp;
var rt = _require.rt;
var ruby = _require.ruby;
var s = _require.s;
var samp = _require.samp;
var script = _require.script;
var section = _require.section;
var select = _require.select;
var small = _require.small;
var source = _require.source;
var span = _require.span;
var strong = _require.strong;
var style = _require.style;
var sub = _require.sub;
var sup = _require.sup;
var table = _require.table;
var tbody = _require.tbody;
var td = _require.td;
var textarea = _require.textarea;
var tfoot = _require.tfoot;
var th = _require.th;
var thead = _require.thead;
var title = _require.title;
var tr = _require.tr;
var u = _require.u;
var ul = _require.ul;
var video = _require.video;

var matchesSelector = undefined;
try {
  matchesSelector = require('matches-selector');
} catch (e) {
  matchesSelector = function () {};
}

var isolateSource = function isolateSource(_source, _scope) {
  return _source.select('.cycle-scope-' + _scope);
};

var isolateSink = function isolateSink(sink, scope) {
  return sink.map(function (vtree) {
    if (vtree.sel.indexOf('cycle-scope-' + scope) === -1) {
      var c = vtree.sel + '.cycle-scope-' + scope;
      vtree.sel = c;
    }
    return vtree;
  });
};

var makeIsStrictlyInRootScope = function makeIsStrictlyInRootScope(rootList, namespace) {
  return function (leaf) {
    var classIsForeign = function classIsForeign(c) {
      var matched = c.match(/cycle-scope-(\S+)/);
      return matched && namespace.indexOf('.' + c) === -1;
    };

    for (var el = leaf.parentElement; el !== null; el = el.parentElement) {
      if (rootList.indexOf(el) >= 0) {
        return true;
      }
      var classList = el.className.split(' ');
      if (classList.some(classIsForeign)) {
        return false;
      }
    }
    return true;
  };
};

var makeEventsSelector = function makeEventsSelector(element$) {
  return function (eventName) {
    var useCapture = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    if (typeof eventName !== 'string') {
      throw new Error('DOM drivers events() expects argument to be a ' + 'string representing the event type to listen for.');
    }
    return element$.map(function (elements) {
      if (!elements) {
        return _most2.default.empty();
      }
      return (0, _fromEvent2.default)(eventName, elements, useCapture);
    }).switch().multicast();
  };
};

// Use function not 'const = x => {}' for this.namespace below
function makeElementSelector(rootElem$) {
  return function DOMSelect(selector) {
    if (typeof selector !== 'string') {
      throw new Error('DOM drivers select() expects first argument to be a ' + 'string as a CSS selector');
    }
    var namespace = this.namespace;
    var scopedSelector = (namespace.join(' ') + ' ' + selector).trim();
    var element$ = selector.trim() === ':root' ? rootElem$ : rootElem$.map(function (x) {
      var array = Array.isArray(x) ? x : [x];
      return (0, _filter2.default)((0, _reduce2.default)((0, _map2.default)(array, function (element) {
        if (matchesSelector(element, scopedSelector)) {
          return [element];
        } else {
          var nodeList = element.querySelectorAll(scopedSelector);
          var nodeListArray = new Array(nodeList.length);
          for (var j = 0; j < nodeListArray.length; j++) {
            nodeListArray[j] = nodeList[j];
          }
          return nodeListArray;
        }
      }), function (prev, curr) {
        return prev.concat(curr);
      }, []), makeIsStrictlyInRootScope(array, namespace));
    });
    return {
      observable: element$,
      namespace: namespace.concat(selector),
      select: makeElementSelector(element$),
      events: makeEventsSelector(element$),
      isolateSource: isolateSource,
      isolateSink: isolateSink
    };
  };
}

var validateDOMDriverInput = function validateDOMDriverInput(view$) {
  if (!view$ || typeof view$.observe !== 'function') {
    throw new Error('The DOM driver function expects as input an ' + 'Observable of virtual DOM elements');
  }
};

var makeDOMDriver = function makeDOMDriver(container) {
  var modules = arguments.length <= 1 || arguments[1] === undefined ? [require('snabbdom/modules/class'), require('snabbdom/modules/props'), require('snabbdom/modules/attributes'), require('snabbdom/modules/style')] : arguments[1];

  var patch = _snabbdom2.default.init(modules);
  var rootElem = (0, _utils.getDomElement)(container);

  var DOMDriver = function DOMDriver(view$) {
    validateDOMDriverInput(view$);

    var rootElem$ = _most2.default.create(function (add) {
      return view$.flatMap(_parseTree2.default).reduce(function (prevView, newView) {
        patch(prevView, newView);
        add(newView.elm);
        return newView;
      }, rootElem);
    });
    rootElem$.drain();

    return {
      namespace: [],
      select: makeElementSelector(rootElem$),
      isolateSink: isolateSink,
      isolateSource: isolateSource
    };
  };

  return DOMDriver;
};

exports.makeDOMDriver = makeDOMDriver;
exports.h = _h2.default;
exports.a = a;
exports.abbr = abbr;
exports.address = address;
exports.area = area;
exports.article = article;
exports.aside = aside;
exports.audio = audio;
exports.b = b;
exports.base = base;
exports.bdi = bdi;
exports.bdo = bdo;
exports.blockquote = blockquote;
exports.body = body;
exports.br = br;
exports.button = button;
exports.canvas = canvas;
exports.caption = caption;
exports.cite = cite;
exports.code = code;
exports.col = col;
exports.colgroup = colgroup;
exports.dd = dd;
exports.del = del;
exports.dfn = dfn;
exports.dir = dir;
exports.div = div;
exports.dl = dl;
exports.dt = dt;
exports.em = em;
exports.embed = embed;
exports.fieldset = fieldset;
exports.figcaption = figcaption;
exports.figure = figure;
exports.footer = footer;
exports.form = form;
exports.h1 = h1;
exports.h2 = h2;
exports.h3 = h3;
exports.h4 = h4;
exports.h5 = h5;
exports.h6 = h6;
exports.head = head;
exports.header = header;
exports.hgroup = hgroup;
exports.hr = hr;
exports.html = html;
exports.i = i;
exports.iframe = iframe;
exports.img = img;
exports.input = input;
exports.ins = ins;
exports.kbd = kbd;
exports.keygen = keygen;
exports.label = label;
exports.legend = legend;
exports.li = li;
exports.link = link;
exports.map = map;
exports.mark = mark;
exports.menu = menu;
exports.meta = meta;
exports.nav = nav;
exports.noscript = noscript;
exports.object = object;
exports.ol = ol;
exports.optgroup = optgroup;
exports.option = option;
exports.p = p;
exports.param = param;
exports.pre = pre;
exports.q = q;
exports.rp = rp;
exports.rt = rt;
exports.ruby = ruby;
exports.s = s;
exports.samp = samp;
exports.script = script;
exports.section = section;
exports.select = select;
exports.small = small;
exports.source = source;
exports.span = span;
exports.strong = strong;
exports.style = style;
exports.sub = sub;
exports.sup = sup;
exports.table = table;
exports.tbody = tbody;
exports.td = td;
exports.textarea = textarea;
exports.tfoot = tfoot;
exports.th = th;
exports.thead = thead;
exports.title = title;
exports.tr = tr;
exports.u = u;
exports.ul = ul;
exports.video = video;