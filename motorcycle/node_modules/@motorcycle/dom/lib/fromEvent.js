'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Stream = require('most/lib/Stream');

var _Stream2 = _interopRequireDefault(_Stream);

var _MulticastSource = require('most/lib/source/MulticastSource');

var _MulticastSource2 = _interopRequireDefault(_MulticastSource);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tryEvent = function tryEvent(time, event, sink) {
  try {
    sink.event(time, event);
  } catch (err) {
    sink.error(time, err);
  }
};

var EventAdapter = function EventAdapter( // eslint-disable-line
init, type, nodes, useCapture, sink, scheduler) {
  this.type = type;
  this.nodes = nodes;
  this.useCapture = useCapture;

  var listener = function listener(event) {
    tryEvent(scheduler.now(), event, sink);
  };

  this._dispose = init(nodes, type, listener, useCapture);
};

EventAdapter.prototype.dispose = function dispose() {
  return this._dispose(this.type, this.nodes);
};

var initEventTarget = function initEventTarget(node, type, listener, useCapture) {
  // eslint-disable-line
  node.addEventListener(type, listener, useCapture);

  var dispose = function dispose(type_, target) {
    target.removeEventListener(type_, listener, useCapture);
  };

  return dispose;
};

function EventTargetSource(type, nodes, useCapture) {
  this.type = type;
  this.nodes = nodes;
  this.useCapture = useCapture;
}

EventTargetSource.prototype.run = function run(sink, scheduler) {
  return new EventAdapter(initEventTarget, this.type, this.nodes, this.useCapture, sink, scheduler);
};

var fromEvent = function fromEvent(type, node) {
  var useCapture = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

  var source = undefined;
  if (node.addEventListener && node.removeEventListener) {
    source = new _MulticastSource2.default(new EventTargetSource(type, node, useCapture));
  } else {
    throw new Error('nodes must support addEventListener/removeEventListener');
  }
  return new _Stream2.default(source);
};

exports.default = fromEvent;