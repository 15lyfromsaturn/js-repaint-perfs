'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.run = undefined;

var _mostSubject = require('most-subject');

var _mostSubject2 = _interopRequireDefault(_mostSubject);

var _hold = require('@most/hold');

var _hold2 = _interopRequireDefault(_hold);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var makeSinkProxies = function makeSinkProxies(drivers) {
  return Object.keys(drivers).reduce(function (sinkProxies, driverName) {
    sinkProxies[driverName] = (0, _mostSubject2.default)();
    return sinkProxies;
  }, {});
};

var callDrivers = function callDrivers(drivers, sinkProxies, disposableStream) {
  return Object.keys(drivers).reduce(function (sources, driverName) {
    var source = drivers[driverName]((0, _hold2.default)(sinkProxies[driverName].stream), driverName);

    sources[driverName] = typeof source.until === 'function' ? source.until(disposableStream) : source;

    return sources;
  }, {});
};

var runMain = function runMain(main, sources, disposableStream) {
  var sinks = main(sources);
  return Object.keys(sinks).reduce(function (accumulator, driverName) {
    accumulator[driverName] = sinks[driverName].until(disposableStream);
    return accumulator;
  }, {});
};

var logErrorToConsole = function logErrorToConsole(err) {
  if (console && console.error) {
    console.error(err.message);
  }
};

var replicateMany = function replicateMany(sinks, sinkProxies) {
  return setTimeout(function () {
    Object.keys(sinks).filter(function (driverName) {
      return sinkProxies[driverName];
    }).forEach(function (driverName) {
      sinks[driverName].forEach(sinkProxies[driverName].sink.add).then(sinkProxies[driverName].sink.end).catch(logErrorToConsole);
    });
  }, 1);
};

var isObjectEmpty = function isObjectEmpty(object) {
  return Object.keys(object).length <= 0;
};

var run = function run(main, drivers) {
  if (typeof main !== 'function') {
    throw new Error('First argument given to run() must be the ' + '\'main\' function.');
  }
  if (typeof drivers !== 'object' || drivers === null) {
    throw new Error('Second argument given to run() must be an ' + 'object with driver functions as properties.');
  }
  if (isObjectEmpty(drivers)) {
    throw new Error('Second argument given to run() must be an ' + 'object with at least one driver function declared as a property.');
  }

  var _subject = (0, _mostSubject2.default)();

  var disposableSink = _subject.sink;
  var disposableStream = _subject.stream;

  var sinkProxies = makeSinkProxies(drivers, disposableStream);
  var sources = callDrivers(drivers, sinkProxies, disposableStream);
  var sinks = runMain(main, sources, disposableStream);
  replicateMany(sinks, sinkProxies);

  var dispose = function dispose() {
    disposableSink.add(1);
    Object.keys(sinkProxies).forEach(function (key) {
      return sinkProxies[key].sink.end();
    });
    disposableSink.end();
  };

  return { sinks: sinks, sources: sources, dispose: dispose };
};

exports.default = { run: run };
exports.run = run;